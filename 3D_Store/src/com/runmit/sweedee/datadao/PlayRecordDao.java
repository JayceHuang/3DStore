package com.runmit.sweedee.datadao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.runmit.sweedee.datadao.PlayRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PLAY_RECORD.
*/
public class PlayRecordDao extends AbstractDao<PlayRecord, Long> {

    public static final String TABLENAME = "PLAY_RECORD";

    /**
     * Properties of entity PlayRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Key = new Property(0, long.class, "key", true, "KEY");
        public final static Property Albumid = new Property(1, Long.class, "albumid", false, "ALBUMID");
        public final static Property Uid = new Property(2, Long.class, "uid", false, "UID");
        public final static Property OrinCreateTime = new Property(3, Long.class, "orinCreateTime", false, "ORIN_CREATE_TIME");
        public final static Property Vedioid = new Property(4, Integer.class, "vedioid", false, "VEDIOID");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Picurl = new Property(7, String.class, "picurl", false, "PICURL");
        public final static Property SubtilteStrInfo = new Property(8, String.class, "subtilteStrInfo", false, "SUBTILTE_STR_INFO");
        public final static Property PlayPos = new Property(9, Integer.class, "playPos", false, "PLAY_POS");
        public final static Property Duration = new Property(10, Integer.class, "duration", false, "DURATION");
        public final static Property Mode = new Property(11, Integer.class, "mode", false, "MODE");
    };


    public PlayRecordDao(DaoConfig config) {
        super(config);
    }
    
    public PlayRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PLAY_RECORD' (" + //
                "'KEY' INTEGER PRIMARY KEY NOT NULL ," + // 0: key
                "'ALBUMID' INTEGER," + // 1: albumid
                "'UID' INTEGER," + // 2: uid
                "'ORIN_CREATE_TIME' INTEGER," + // 3: orinCreateTime
                "'VEDIOID' INTEGER," + // 4: vedioid
                "'CREATE_TIME' INTEGER," + // 5: createTime
                "'NAME' TEXT," + // 6: name
                "'PICURL' TEXT," + // 7: picurl
                "'SUBTILTE_STR_INFO' TEXT," + // 8: subtilteStrInfo
                "'PLAY_POS' INTEGER," + // 9: playPos
                "'DURATION' INTEGER," + // 10: duration
                "'MODE' INTEGER);"); // 11: mode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PLAY_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PlayRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getKey());
 
        Long albumid = entity.getAlbumid();
        if (albumid != null) {
            stmt.bindLong(2, albumid);
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(3, uid);
        }
 
        Long orinCreateTime = entity.getOrinCreateTime();
        if (orinCreateTime != null) {
            stmt.bindLong(4, orinCreateTime);
        }
 
        Integer vedioid = entity.getVedioid();
        if (vedioid != null) {
            stmt.bindLong(5, vedioid);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String picurl = entity.getPicurl();
        if (picurl != null) {
            stmt.bindString(8, picurl);
        }
 
        String subtilteStrInfo = entity.getSubtilteStrInfo();
        if (subtilteStrInfo != null) {
            stmt.bindString(9, subtilteStrInfo);
        }
 
        Integer playPos = entity.getPlayPos();
        if (playPos != null) {
            stmt.bindLong(10, playPos);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(11, duration);
        }
 
        Integer mode = entity.getMode();
        if (mode != null) {
            stmt.bindLong(12, mode);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PlayRecord readEntity(Cursor cursor, int offset) {
        PlayRecord entity = new PlayRecord( //
            cursor.getLong(offset + 0), // key
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // albumid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // orinCreateTime
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // vedioid
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // picurl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // subtilteStrInfo
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // playPos
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // duration
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // mode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PlayRecord entity, int offset) {
        entity.setKey(cursor.getLong(offset + 0));
        entity.setAlbumid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setOrinCreateTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setVedioid(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPicurl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubtilteStrInfo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlayPos(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDuration(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setMode(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PlayRecord entity, long rowId) {
        entity.setKey(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PlayRecord entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.runmit.sweedee.datadao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.runmit.sweedee.datadao.SearchHisRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SEARCH_HIS_RECORD.
*/
public class SearchHisRecordDao extends AbstractDao<SearchHisRecord, String> {

    public static final String TABLENAME = "SEARCH_HIS_RECORD";

    /**
     * Properties of entity SearchHisRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Words = new Property(0, String.class, "words", true, "WORDS");
        public final static Property Time = new Property(1, Long.class, "time", false, "TIME");
    };


    public SearchHisRecordDao(DaoConfig config) {
        super(config);
    }
    
    public SearchHisRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SEARCH_HIS_RECORD' (" + //
                "'WORDS' TEXT PRIMARY KEY NOT NULL ," + // 0: words
                "'TIME' INTEGER);"); // 1: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SEARCH_HIS_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SearchHisRecord entity) {
        stmt.clearBindings();
 
        String words = entity.getWords();
        if (words != null) {
            stmt.bindString(1, words);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SearchHisRecord readEntity(Cursor cursor, int offset) {
        SearchHisRecord entity = new SearchHisRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // words
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SearchHisRecord entity, int offset) {
        entity.setWords(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SearchHisRecord entity, long rowId) {
        return entity.getWords();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SearchHisRecord entity) {
        if(entity != null) {
            return entity.getWords();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
